{
	"info": {
		"_postman_id": "a50151e3-2f8e-4449-9732-3a28019a5ae5",
		"name": "Payment Initiation",
		"description": "This service domain provides a customer payment service. It captures the payer and payee details and other key properties of the payment and orchestrates the transaction. It provides support for repeating/scheduled payments\n\nContact Support:\n Name: BIAN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21868609"
	},
	"item": [
		{
			"name": "PaymentInitiation",
			"item": [
				{
					"name": "{paymentinitiationid}",
					"item": [
						{
							"name": "UpCR Update details of a payment transaction instruction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_preRequestScripts'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"NOTE: This code is stored in GitHub:",
											"https://github.com/BidnessForB/bian-validation/blob/main/scripts/request/test.js",
											"",
											"*/",
											"",
											"",
											"var api = 'Payment Initiation'; //need to make this dynamic",
											"var path = pm.environment.get(\"schema_path\");  //need to make this dynamic",
											"var method = pm.request.method.toLowerCase(); //Set dynamically",
											"// Pull variables needed to pull the OpenAPI",
											"// TODO: this should all be dynamic somehow, maybe by tracing request path",
											"var postman_api_key = pm.environment.get(\"postmanApiKey\");",
											"var api_id = pm.environment.get(\"apiId\");",
											"var api_version_id = pm.environment.get(\"apiVersionId\");",
											"var schema_id = pm.environment.get(\"schemaId\");",
											"// Pull the OpenAPI from the Postman API",
											"// We're just after a schema here and it's not going to change, should we just go straight to BIAN?",
											"var api_url = 'https://api.getpostman.com/apis/' + api_id + '/versions/' + api_version_id + '/schemas/' + schema_id;",
											"",
											"const yaml =  pm.environment.get('js_yaml');",
											"(new Function(yaml))();",
											"",
											"  //Mutate the schema to require all properties, custom for each ref :(",
											"  function requireAll (schema) {",
											"    if(status != 200) {",
											"        return schema;",
											"    }",
											"    console.log(\"unmodified subschema\" + JSON.stringify(schema));",
											"    var newSchema = {};",
											"    newSchema.type = schema.type;",
											"    newSchema.properties = schema.properties;",
											"    newSchema.required = Object.keys(schema.properties);",
											"    newSchema.additionalProperties = false;",
											"    if(status == 200) {",
											"        newSchema.properties.PaymentInitiationTransaction.required = Object.keys(schema.properties.PaymentInitiationTransaction.properties);",
											"        newSchema.properties.PaymentInitiationTransaction.additionalProperties = false;",
											"      }",
											"    return newSchema",
											"  };",
											"",
											"  function validate(data, schema) {",
											"    var Ajv = require('ajv');",
											"    ajv = new Ajv({logger: console});",
											"    schema = requireAll(schema);",
											"    console.log(\"schema \", schema);",
											"    const validate = ajv.compile(schema);",
											"    const valid = validate(data);",
											"    return valid;",
											"};",
											"",
											"function getSubSchemaYaml(schemapath, method, schemaYaml, type) {",
											"    var schemaJson = jsyaml.load(schemaYaml);",
											"    return getSubSchemaJson(schemapath, method, schemaJson, type);",
											"};",
											"",
											"function getSubSchemaJson(schemapath, method, schema, type) {",
											"    var subComponent = type === 'request' ? 'requestBody' : 'responses';",
											"    var subRef = type === 'request' ?'requestBodies' :'responses'; ",
											"    var elem;",
											"",
											"    var schemaData = {};",
											"    schemaData.subSchema = \"No Schema\"",
											"    schemaData.ref = \"No Ref\";",
											"",
											"  try {",
											"      if(subComponent === 'responses') {",
											"        elem = schema.paths[schemapath][method][subComponent][status]['$ref'];",
											"      }",
											"      else {",
											"        elem = schema.paths[schemapath][method][subComponent]['$ref'];",
											"      }",
											"    }",
											"    catch(err) {",
											"      if(err.message === \"Cannot read properties of undefined (reading '$ref')\") {",
											"        console.log(\"No \" + type + \"body found for method \" + method + \" on path: \" + schemapath);",
											"        return schemaData;",
											"      }",
											"    }    elem = elem.split('\\/')[(elem.split('\\/').length) - 1]",
											"    var elemRef = schema.components[subRef][elem].content['application/json'].schema['$ref'];",
											"    if(status != 200) {",
											"        elemRef = elemRef.split('\\/')[(elemRef.split('\\/').length) - 1] //works for req and res 200",
											"      }",
											"      else {",
											"        elemRef = elem.split('\\/')[(elem.split('\\/').length) - 1] //works for req and res 200",
											"      }",
											"    //elemRef = elem.split('\\/')[(elem.split('\\/').length) - 1]",
											"    schemaData = {};",
											"    schemaData.subSchema = schema.components.schemas[elemRef];",
											"    schemaData.ref = elemRef;",
											"    return schemaData;",
											"};",
											"",
											"",
											"console.log(\"PATH: \" + path);",
											"",
											"// Use the value of the `x-mock-response-code` header if it exists, is not disabled, and if the `use-response-code` ",
											"// environment variable is set to `true`.  The header is configured in the pre-request script",
											"if(pm.request.headers.has(\"x-mock-response-code\")) {",
											"    var status = pm.request.headers.one(\"x-mock-response-code\").disabled ? 200 : parseInt(pm.request.headers.get(\"x-mock-response-code\"));",
											"    status = (status == undefined || isNaN(status)  ? 200 : status);",
											"}",
											"",
											"//Hardcode status to something different from that returned by the above",
											"//This code executes if the `force_conflict` collection variable is set to true AND `use_mock_response` is set to true AND `response-code` is not 200",
											"if(pm.collectionVariables.get(\"force_conflict\") === 'true')",
											"    status = 200;",
											"",
											"",
											"// First Test - Baseline Status Code",
											"pm.test(\"Status code is \" + status, function () {",
											"    pm.response.to.have.status(status);",
											"});",
											"",
											"",
											"",
											"",
											"const apiRequest = {",
											"  url: api_url,",
											"  method: 'GET',",
											"  header: 'X-Api-Key:' + postman_api_key,",
											"};",
											"//Get the API",
											"pm.sendRequest(apiRequest, function (err, res) {",
											"",
											"    if (err) {",
											"        pm.test('Error fetching schema for the ' + api + ': ' + e.message, function() {",
											"                pm.expect(false).to.be.true;",
											"            });",
											"    } else {   ",
											"",
											"        // Pull Schema from API response        ",
											"        var api_response = res.json();  ",
											"        ",
											"        var resBodySchemaData = getSubSchemaYaml(path, method, api_response.schema.schema, \"response\");",
											"        var reqBodySchemaData = getSubSchemaYaml(path, method, api_response.schema.schema, \"request\")",
											"        ",
											"        const bodyValid = validate(pm.response.json(), resBodySchemaData.subSchema);",
											"        ",
											"        if(reqBodySchemaData.ref !== 'No Ref') {",
											"            pm.test('Validating request body against ' + reqBodySchemaData.ref + ' schema from the ' + api + ' OpenAPI', function() {",
											"                const reqValid = validate(JSON.parse(pm.request.body.raw), reqBodySchemaData.subSchema);",
											"                pm.expect(reqValid).to.be.true;",
											"            });",
											"        }",
											"        else {",
											"                pm.test('No request body for path ' + path +  'from the ' + api + ' OpenAPI', function() {",
											"                pm.expect(true).to.be.true;",
											"            });",
											"        }",
											"        if(resBodySchemaData.ref !== 'No Ref') {",
											"            pm.test('Validating response body against ' + resBodySchemaData.ref + ' schema from the ' + api + ' OpenAPI', function() {",
											"                ",
											"                pm.expect(bodyValid).to.be.true;",
											"            });",
											"        }",
											"        else {",
											"                pm.test('No response body for path ' + path +  'from the ' + api + ' OpenAPI', function() {",
											"                pm.expect(true).to.be.true;",
											"            });",
											"        }",
											"        ",
											"    }    ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-mock-response-code",
										"value": "500",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"qui officia\",\n    \"RecurringPaymentRecord\": \"deserunt\",\n    \"RecurringPaymentCustomerReference\": \"voluptate proident\",\n    \"RecurringPaymentReference\": \"in cupidatat irure\",\n    \"PayerReference\": \"cillum Lorem fugiat laboris\",\n    \"PayerBankReference\": \"consequat\",\n    \"PayerProductInstanceReference\": \"occaecat dolor veniam Lorem e\",\n    \"PayeeReference\": \"culpa dolor labore ad\",\n    \"PayeeBankReference\": \"veniam labore Lorem\",\n    \"PayeeProductInstanceReference\": \"veniam id\",\n    \"Amount\": \"reprehenderit\",\n    \"Currency\": \"esse ipsum deserunt\",\n    \"DateType\": \"sint eiusmod\",\n    \"PaymentFeesCharges\": \"exercitation nisi officia\",\n    \"PaymentMechanism\": \"dolor laborum commodo aute\",\n    \"PaymentPurpose\": \"Excepteu\",\n    \"DocumentDirectoryEntryInstanceReference\": \"ut\",\n    \"DocumentContent\": \"Ut officia quis cillum\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										":paymentinitiationid",
										"Update"
									],
									"variable": [
										{
											"key": "paymentinitiationid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										}
									]
								},
								"description": "UpCR Update details of a payment transaction instruction"
							},
							"response": [
								{
									"name": "UpdatePaymentInitiationTransactionResponse",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"aliquip eiusmod Lorem ex\",\n    \"RecurringPaymentRecord\": \"culpa Duis\",\n    \"RecurringPaymentCustomerReference\": \"irure adipisicing ex quis minim\",\n    \"RecurringPaymentReference\": \"deserunt cupidatat reprehenderit ut\",\n    \"PayerReference\": \"aliqua consequat elit proident veniam\",\n    \"PayerBankReference\": \"id qui\",\n    \"PayerProductInstanceReference\": \"elit cillum fugiat cupidatat sunt\",\n    \"PayeeReference\": \"ea aliquip elit et\",\n    \"PayeeBankReference\": \"dolore amet\",\n    \"PayeeProductInstanceReference\": \"est non\",\n    \"Amount\": \"sit mollit in velit nostrud\",\n    \"Currency\": \"adipisicing aute mollit deserunt\",\n    \"DateType\": \"dolore non fugiat\",\n    \"PaymentFeesCharges\": \"in Duis\",\n    \"PaymentMechanism\": \"amet Lorem adipisicing\",\n    \"PaymentPurpose\": \"ut sunt minim\",\n    \"DocumentDirectoryEntryInstanceReference\": \"fugiat laboris non\",\n    \"DocumentContent\": \"eiusmod ullamco dolore id\"\n  }\n}"
								},
								{
									"name": "BadRequest",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "NotFound",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "TooManyRequests",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "InternalServerError",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Update"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								}
							]
						},
						{
							"name": "ReCR Retrieve details about a payment transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_preRequestScripts'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*",
											"NOTE: This code is stored in GitHub:",
											"https://github.com/BidnessForB/bian-validation/blob/main/scripts/request/test.js",
											"",
											"*/",
											"",
											"",
											"var api = 'Payment Initiation'; //need to make this dynamic",
											"var path = pm.environment.get(\"schema_path\");  //need to make this dynamic",
											"var method = pm.request.method.toLowerCase(); //Set dynamically",
											"// Pull variables needed to pull the OpenAPI",
											"// TODO: this should all be dynamic somehow, maybe by tracing request path",
											"var postman_api_key = pm.environment.get(\"postmanApiKey\");",
											"var api_id = pm.environment.get(\"apiId\");",
											"var api_version_id = pm.environment.get(\"apiVersionId\");",
											"var schema_id = pm.environment.get(\"schemaId\");",
											"// Pull the OpenAPI from the Postman API",
											"// We're just after a schema here and it's not going to change, should we just go straight to BIAN?",
											"var api_url = 'https://api.getpostman.com/apis/' + api_id + '/versions/' + api_version_id + '/schemas/' + schema_id;",
											"",
											"const yaml =  pm.environment.get('js_yaml');",
											"(new Function(yaml))();",
											"",
											"  //Mutate the schema to require all properties, custom for each ref :(",
											"  function requireAll (schema) {",
											"    if(status != 200) {",
											"        return schema;",
											"    }",
											"    console.log(\"unmodified subschema\" + JSON.stringify(schema));",
											"    var newSchema = {};",
											"    newSchema.type = schema.type;",
											"    newSchema.properties = schema.properties;",
											"    newSchema.required = Object.keys(schema.properties);",
											"    newSchema.additionalProperties = false;",
											"    if(status == 200) {",
											"        newSchema.properties.PaymentInitiationTransaction.required = Object.keys(schema.properties.PaymentInitiationTransaction.properties);",
											"        newSchema.properties.PaymentInitiationTransaction.additionalProperties = false;",
											"      }",
											"    return newSchema",
											"  };",
											"",
											"  function validate(data, schema) {",
											"    var Ajv = require('ajv');",
											"    ajv = new Ajv({logger: console});",
											"    schema = requireAll(schema);",
											"    console.log(\"schema \", schema);",
											"    const validate = ajv.compile(schema);",
											"    const valid = validate(data);",
											"    return valid;",
											"};",
											"",
											"function getSubSchemaYaml(schemapath, method, schemaYaml, type) {",
											"    var schemaJson = jsyaml.load(schemaYaml);",
											"    return getSubSchemaJson(schemapath, method, schemaJson, type);",
											"};",
											"",
											"function getSubSchemaJson(schemapath, method, schema, type) {",
											"    var subComponent = type === 'request' ? 'requestBody' : 'responses';",
											"    var subRef = type === 'request' ?'requestBodies' :'responses'; ",
											"    var elem;",
											"",
											"    var schemaData = {};",
											"    schemaData.subSchema = \"No Schema\"",
											"    schemaData.ref = \"No Ref\";",
											"",
											"  try {",
											"      if(subComponent === 'responses') {",
											"        elem = schema.paths[schemapath][method][subComponent][status]['$ref'];",
											"      }",
											"      else {",
											"        elem = schema.paths[schemapath][method][subComponent]['$ref'];",
											"      }",
											"    }",
											"    catch(err) {",
											"      if(err.message === \"Cannot read properties of undefined (reading '$ref')\") {",
											"        console.log(\"No \" + type + \"body found for method \" + method + \" on path: \" + schemapath);",
											"        return schemaData;",
											"      }",
											"    }    elem = elem.split('\\/')[(elem.split('\\/').length) - 1]",
											"    var elemRef = schema.components[subRef][elem].content['application/json'].schema['$ref'];",
											"    if(status != 200) {",
											"        elemRef = elemRef.split('\\/')[(elemRef.split('\\/').length) - 1] //works for req and res 200",
											"      }",
											"      else {",
											"        elemRef = elem.split('\\/')[(elem.split('\\/').length) - 1] //works for req and res 200",
											"      }",
											"    //elemRef = elem.split('\\/')[(elem.split('\\/').length) - 1]",
											"    schemaData = {};",
											"    schemaData.subSchema = schema.components.schemas[elemRef];",
											"    schemaData.ref = elemRef;",
											"    return schemaData;",
											"};",
											"",
											"",
											"console.log(\"PATH: \" + path);",
											"",
											"// Use the value of the `x-mock-response-code` header if it exists, is not disabled, and if the `use-response-code` ",
											"// environment variable is set to `true`.  The header is configured in the pre-request script",
											"if(pm.request.headers.has(\"x-mock-response-code\")) {",
											"    var status = pm.request.headers.one(\"x-mock-response-code\").disabled ? 200 : parseInt(pm.request.headers.get(\"x-mock-response-code\"));",
											"    status = (status == undefined || isNaN(status)  ? 200 : status);",
											"}",
											"",
											"//Hardcode status to something different from that returned by the above",
											"//This code executes if the `force_conflict` collection variable is set to true AND `use_mock_response` is set to true AND `response-code` is not 200",
											"if(pm.collectionVariables.get(\"force_conflict\") === 'true')",
											"    status = 200;",
											"",
											"",
											"// First Test - Baseline Status Code",
											"pm.test(\"Status code is \" + status, function () {",
											"    pm.response.to.have.status(status);",
											"});",
											"",
											"",
											"",
											"",
											"const apiRequest = {",
											"  url: api_url,",
											"  method: 'GET',",
											"  header: 'X-Api-Key:' + postman_api_key,",
											"};",
											"//Get the API",
											"pm.sendRequest(apiRequest, function (err, res) {",
											"",
											"    if (err) {",
											"        console.log(err);",
											"    } else {   ",
											"",
											"        // Pull Schema from API response        ",
											"        var api_response = res.json();  ",
											"        ",
											"        var resBodySchemaData = getSubSchemaYaml(path, method, api_response.schema.schema, \"response\");",
											"        var reqBodySchemaData = getSubSchemaYaml(path, method, api_response.schema.schema, \"request\")",
											"        ",
											"        const bodyValid = validate(pm.response.json(), resBodySchemaData.subSchema);",
											"        ",
											"        if(reqBodySchemaData.ref !== 'No Ref') {",
											"            pm.test('Validating request body against ' + reqBodySchemaData.ref + ' schema from the ' + api + ' OpenAPI', function() {",
											"                const reqValid = validate(JSON.parse(pm.request.body.raw), reqBodySchemaData.subSchema);",
											"                pm.expect(reqValid).to.be.true;",
											"            });",
											"        }",
											"        else {",
											"                pm.test('No request body for path ' + path +  'from the ' + api + ' OpenAPI', function() {",
											"                pm.expect(true).to.be.true;",
											"            });",
											"        }",
											"        if(resBodySchemaData.ref !== 'No Ref') {",
											"            pm.test('Validating response body against ' + resBodySchemaData.ref + ' schema from the ' + api + ' OpenAPI', function() {",
											"                ",
											"                pm.expect(bodyValid).to.be.true;",
											"            });",
											"        }",
											"        else {",
											"                pm.test('No response body for path ' + path +  'from the ' + api + ' OpenAPI', function() {",
											"                pm.expect(true).to.be.true;",
											"            });",
											"        }",
											"        ",
											"    }    ",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-mock-response-code",
										"value": "{{response-code}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										":paymentinitiationid",
										"Retrieve"
									],
									"variable": [
										{
											"key": "paymentinitiationid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										}
									]
								},
								"description": "ReCR Retrieve details about a payment transaction"
							},
							"response": [
								{
									"name": "RetrievePaymentInitiationTransactionResponse",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"minim id\",\n    \"RecurringPaymentRecord\": \"reprehenderit enim aute elit non\",\n    \"RecurringPaymentCustomerReference\": \"in nisi reprehenderit\",\n    \"RecurringPaymentReference\": \"dolor elit cupidatat sit\",\n    \"PayerReference\": \"eiusmod qui sed exercitation\",\n    \"PayerBankReference\": \"occaecat\",\n    \"PayerProductInstanceReference\": \"eiusmod nisi ullamco\",\n    \"PayeeReference\": \"in cillum anim elit\",\n    \"PayeeBankReference\": \"nulla eu dolor in aliquip\",\n    \"PayeeProductInstanceReference\": \"cillum Duis\",\n    \"Amount\": \"Ut ut aliqua ad\",\n    \"Currency\": \"incididunt deserunt nisi\",\n    \"DateType\": \"amet aute anim\",\n    \"PaymentFeesCharges\": \"adipisicing officia mollit\",\n    \"PaymentMechanism\": \"velit veni\",\n    \"PaymentPurpose\": \"ut deserunt in in\",\n    \"DocumentDirectoryEntryInstanceReference\": \"Excepteur magna labore\",\n    \"DocumentContent\": \"in et magna\"\n  }\n}"
								},
								{
									"name": "BadRequest",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "NotFound",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "TooManyRequests",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "InternalServerError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								}
							]
						},
						{
							"name": "ReBQ Retrieve details about a payment transaction compliance check",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_preRequestScripts'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_testScripts'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-mock-response-code",
										"value": "{{response-code}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										":paymentinitiationid",
										"Compliance",
										":complianceid",
										"Retrieve"
									],
									"variable": [
										{
											"key": "paymentinitiationid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										},
										{
											"key": "complianceid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										}
									]
								},
								"description": "ReBQ Retrieve details about a payment transaction compliance check"
							},
							"response": [
								{
									"name": "RetrieveComplianceResponse",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"cillum irure laborum Ut\",\n    \"CustomerReference\": \"ea Ut\",\n    \"PayerReference\": \"dolore laboris\",\n    \"PayerBankReference\": \"veniam officia eu\",\n    \"PayerProductInstanceReference\": \"dolor adipisicing mollit veniam\",\n    \"PayeeReference\": \"in qui nisi\",\n    \"PayeeBankReference\": \"Excepteur\",\n    \"PayeeProductInstanceReference\": \"magna cupidatat id\",\n    \"Amount\": \"cillum veniam occaecat quis ex\",\n    \"Currency\": \"adipisicing tempor\",\n    \"DateType\": \"amet mollit\",\n    \"PaymentPurpose\": \"mollit nisi in\",\n    \"DocumentDirectoryEntryInstanceReference\": \"culpa cillum Ut\",\n    \"DocumentContent\": \"mollit sit\"\n  },\n  \"Compliance\": {\n    \"PaymentTransactionComplianceCheckType\": \"sit nostrud\",\n    \"PaymentTransactionComplianceCheckResult\": \"do irure aute Duis\",\n    \"PaymentTransactionComplianceTaskResult\": \"Excepteur anim sed\"\n  }\n}"
								},
								{
									"name": "BadRequest",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "NotFound",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "TooManyRequests",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "InternalServerError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/Compliance/:complianceid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"Compliance",
												":complianceid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "complianceid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								}
							]
						},
						{
							"name": "ReBQ Retrieve details about a payment transaction funds available",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_preRequestScripts'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_testScripts'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-mock-response-code",
										"value": "{{response-code}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										":paymentinitiationid",
										"FundingCheck",
										":fundingcheckid",
										"Retrieve"
									],
									"variable": [
										{
											"key": "paymentinitiationid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										},
										{
											"key": "fundingcheckid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										}
									]
								},
								"description": "ReBQ Retrieve details about a payment transaction funds available"
							},
							"response": [
								{
									"name": "RetrieveFundingCheckResponse",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"do occaecat sunt ipsum\",\n    \"CustomerReference\": \"ipsum u\",\n    \"PayerReference\": \"in ut anim\",\n    \"PayerBankReference\": \"consequat u\",\n    \"PayerProductInstanceReference\": \"eu do deserunt ut sunt\",\n    \"Amount\": \"dolor veniam\",\n    \"Currency\": \"Excepteur elit laborum amet\",\n    \"DateType\": \"cillum\",\n    \"PaymentFeesCharges\": \"ea dolor velit ex fugiat\"\n  },\n  \"FundingCheck\": {\n    \"PaymentTransactionFundingCheckResult\": \"id Duis labore\"\n  }\n}"
								},
								{
									"name": "BadRequest",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "NotFound",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "TooManyRequests",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "InternalServerError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/FundingCheck/:fundingcheckid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"FundingCheck",
												":fundingcheckid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "fundingcheckid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								}
							]
						},
						{
							"name": "ReBQ Retrieve details about the payment order initiation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_preRequestScripts'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.collectionVariables.get('CodeLibrary_testScripts'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-mock-response-code",
										"value": "{{response-code}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										":paymentinitiationid",
										"OrderInitiation",
										":orderinitiationid",
										"Retrieve"
									],
									"variable": [
										{
											"key": "paymentinitiationid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										},
										{
											"key": "orderinitiationid",
											"value": "ipsum aliqua minim",
											"description": "(Required) "
										}
									]
								},
								"description": "ReBQ Retrieve details about the payment order initiation"
							},
							"response": [
								{
									"name": "RetrieveOrderInitiationResponse",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"labore consectetur eiusmod\",\n    \"CustomerReference\": \"qui dolor\",\n    \"PayerReference\": \"eu proident quis\",\n    \"PayerBankReference\": \"velit\",\n    \"PayerProductInstanceReference\": \"ut laboris culpa\",\n    \"PayeeReference\": \"dolore ipsum nulla\",\n    \"PayeeBankReference\": \"commodo irure minim dolore\",\n    \"PayeeProductInstanceReference\": \"magna\",\n    \"Amount\": \"nulla cillum fugiat dolore in\",\n    \"Currency\": \"magna ut\",\n    \"DateType\": \"sint Lorem cillum do\",\n    \"PaymentFeesCharges\": \"sint sunt elit quis ex\",\n    \"PaymentMechanism\": \"velit quis\",\n    \"PaymentPurpose\": \"ut voluptate consequat incidid\",\n    \"DocumentDirectoryEntryInstanceReference\": \"nostrud\",\n    \"DocumentContent\": \"ut voluptate\"\n  },\n  \"OrderInitiation\": {\n    \"PaymentOrderProcedureInstanceReference\": \"ut aute\",\n    \"PaymentOrderProcedureInstanceStatus\": \"sit ullamco \",\n    \"OrderInitiationTaskResult\": \"eiusmod dolor dolore\"\n  }\n}"
								},
								{
									"name": "BadRequest",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "NotFound",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "TooManyRequests",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								},
								{
									"name": "InternalServerError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/PaymentInitiation/:paymentinitiationid/OrderInitiation/:orderinitiationid/Retrieve",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"PaymentInitiation",
												":paymentinitiationid",
												"OrderInitiation",
												":orderinitiationid",
												"Retrieve"
											],
											"variable": [
												{
													"key": "paymentinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												},
												{
													"key": "orderinitiationid",
													"value": "ipsum aliqua minim",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "InCR Initiate a payment transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.collectionVariables.get('CodeLibrary_preRequestScripts'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.collectionVariables.get('CodeLibrary_testScripts'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-mock-response-code",
								"value": "200",
								"description": "200",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"PaymentInitiationTransaction\": {\n    \"PaymentTransactionType\": \"labore\",\n    \"RecurringPaymentRecord\": \"proident sint\",\n    \"RecurringPaymentCustomerReference\": \"reprehenderit dolore Excepteur ex\",\n    \"RecurringPaymentReference\": \"quis Excepteur id\",\n    \"PayerReference\": \"irure aliqua enim do dolor\",\n    \"PayerBankReference\": \"in sint\",\n    \"PayerProductInstanceReference\": \"aute\",\n    \"PayeeReference\": \"veniam do\",\n    \"PayeeBankReference\": \"in mollit aliqua\",\n    \"PayeeProductInstanceReference\": \"in tempor culpa\",\n    \"Amount\": \"qui minim commodo\",\n    \"Currency\": \"Ut labore \",\n    \"DateType\": \"reprehenderit aliqua sed\",\n    \"PaymentMechanism\": \"aliquip nostrud Ut\",\n    \"PaymentPurpose\": \"nisi aliquip eu ipsum\",\n    \"DocumentDirectoryEntryInstanceReference\": \"incididunt\",\n    \"DocumentContent\": \"esse\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"PaymentInitiation",
								"Initiate"
							]
						},
						"description": "InCR Initiate a payment transaction"
					},
					"response": [
						{
							"name": "InitiatePaymentInitiationTransactionResponse",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"PaymentInitiationTransaction\": {\n    \"RecurringPaymentRecord\": \"consectetur\",\n    \"RecurringPaymentCustomerReference\": \"aliquip\",\n    \"RecurringPaymentReference\": \"ipsum officia pariatur\",\n    \"DateType\": \"anim dolore\",\n    \"PaymentFeesCharges\": \"sed est consequat\",\n    \"DocumentDirectoryEntryInstanceReference\": \"ut fugiat consequat non Duis\"\n  }\n}"
						},
						{
							"name": "BadRequest",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
						},
						{
							"name": "NotFound",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
						},
						{
							"name": "TooManyRequests",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
						},
						{
							"name": "InternalServerError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/PaymentInitiation/Initiate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"PaymentInitiation",
										"Initiate"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status_code\": \"enim mollit ut\",\n  \"status\": \"consectetur nostrud\",\n  \"message\": \"sit laboris est\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{postmanApiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"type": "any"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"eval(pm.collectionVariables.get(\"code_getPreRequestScripts\"));",
					"eval(pm.collectionVariables.get(\"code_getTestScripts\"));",
					"eval(pm.collectionVariables.get(\"code_getSchema\"));",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://virtserver.swaggerhub.com/BIAN-3/BIAN/PaymentInitiation/11.0.0",
			"type": "string"
		},
		{
			"key": "response-code",
			"value": "401",
			"type": "string"
		},
		{
			"key": "CodeLibrary_preRequestScripts",
			"value": "",
			"type": "string"
		},
		{
			"key": "CodeLibrary_testScripts",
			"value": ""
		},
		{
			"key": "code_getPreRequestScripts",
			"value": "/*\n * Example showing the code to retrieve snippets from GitHub\n * for use as PreRequest scripts. Stored in the code_getPreRequestScripts\n * environment variable\n*/\n//Setup the URL components\nvar owner = pm.collectionVariables.get(\"owner\");\nvar repoSlug = pm.collectionVariables.get(\"GitHub_repoSlug\");\nvar path = pm.collectionVariables.get(\"GitHub_preRequestScriptsPath\");\nvar token = pm.environment.get(\"GitHubPAT\");\nvar baseUrl = pm.collectionVariables.get(\"GitHub_APIBaseURL\");\n//Build the URL\nvar url = baseUrl + \"/repos/\" + repoSlug + \"/contents/\" + path;\nconsole.log(\"URL: \" + url);\nconst postRequest = {\n url: url,\n method: 'get',\n header: {\n 'Content-Type': 'application/json',\n 'Authorization': 'bearer ' + token\n }\n};\npm.sendRequest(postRequest, (err, res) => {\n var jsonData = JSON.parse(res.text());\nvar base64content = jsonData.content;\nvar buff = new Buffer(base64content, 'base64');\nvar content = buff.toString('ascii');\npm.collectionVariables.set(\"CodeLibrary_preRequestScripts\", content);\n});",
			"type": "string"
		},
		{
			"key": "code_getTestScripts",
			"value": "/*\n * Example showing the code to retrieve snippets from GitHub\n * for use a Test scripts. Stored in the code_getTestScripts\n * environment variable\n*/\n//Setup the URL components\nvar owner = pm.collectionVariables.get(\"owner\");\nvar repoSlug = pm.collectionVariables.get(\"GitHub_repoSlug\");\nvar path = pm.collectionVariables.get(\"GitHub_testScriptsPath\");\nvar token = pm.environment.get(\"GitHubPAT\");\nvar baseUrl = pm.collectionVariables.get(\"GitHub_APIBaseURL\");\n//Build the URL\nvar url = baseUrl + \"/repos/\" + repoSlug + \"/contents/\" + path;\nconsole.log(\"URL: \" + url);\nconst postRequest = {\n url: url,\n method: 'get',\n header: {\n 'Content-Type': 'application/json',\n 'Authorization': 'bearer ' + token\n }\n};\npm.sendRequest(postRequest, (err, res) => {\n var jsonData = JSON.parse(res.text());\nvar base64content = jsonData.content;\nvar buff = new Buffer(base64content, 'base64');\nvar content = buff.toString('ascii');\npm.collectionVariables.set(\"CodeLibrary_testScripts\", content);\n});\n",
			"type": "string"
		},
		{
			"key": "code_getSchema",
			"value": "/*\n * Example showing the code to retrieve snippets from GitHub\n * for use as PreRequest scripts. Stored in the code_getPreRequestScripts\n * environment variable\n*/\n//Setup the URL components\nvar token = pm.environment.get(\"GitHubPAT\");\nvar baseUrl = pm.collectionVariables.get(\"GitHub_APIBaseURL\");\n//Build the URL\nvar url = baseUrl + \"/\" + pm.collectionVariables.get(\"GitHub_schemaPath\");\nconsole.log(\"URL: \" + url);\nconst postRequest = {\n url: url,\n method: 'get',\n header: {\n 'Content-Type': 'application/json',\n 'Authorization': 'bearer ' + token\n }\n};\npm.sendRequest(postRequest, (err, res) => {\nvar jsonData = JSON.parse(res.text());\nvar base64content = jsonData.content;\nvar buff = new Buffer(base64content, 'base64');\nvar content = buff.toString('ascii');\npm.collectionVariables.set(\"schema_json\", content);\n});",
			"type": "string"
		},
		{
			"key": "GitHub_preRequestScriptsPath",
			"value": "scripts/request/pre-request.js",
			"type": "string"
		},
		{
			"key": "GitHub_testScriptsPath",
			"value": "scripts/request/test.js",
			"type": "string"
		},
		{
			"key": "GitHub_repoSlug",
			"value": "bidnessforb/bian-validation",
			"type": "string"
		},
		{
			"key": "GitHub_APIBaseURL",
			"value": "https://api.github.com",
			"type": "string"
		},
		{
			"key": "force_conflict",
			"value": "false",
			"type": "string"
		},
		{
			"key": "GitHub_schemaPath",
			"value": "repos/bidnessforb/bian-validation/contents/resources/postman/PaymentInitiation-schema.yaml",
			"type": "string"
		},
		{
			"key": "schema_json",
			"value": "",
			"type": "string"
		}
	]
}